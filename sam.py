import cv2
import numpy as np
import onnxruntime as ort
from copy import deepcopy
import time
print("   ")
print("   ")
print("   ")
print("   ")
print(" START  ")
print("   ")

encoder_path = str(op('script2').par.Encoder)
decoder_path = str(op('script2').par.Decoder)

encoder = ort.InferenceSession(encoder_path)
decoder = ort.InferenceSession(decoder_path)

print( "Usign device",ort.get_device()  )

def onCook(scriptOp):
    print("   ")
    print("   ")
    print("ok cook ")

    ## DO NOT TOUCH THIS PART
    img = scriptOp.inputs[0].numpyArray()
    img_copy_CV = img[:, :, :3]*255
    img_copy_CV = np.flip(img_copy_CV, axis=0)

    orig_height,orig_width, _ = img.shape
    resized_height,resized_width, _ = img.shape

    if orig_width > orig_height:
        resized_width = 1024
        resized_height = int(1024 / orig_width * orig_height)
    else:
        resized_height = 1024
        resized_width = int(1024 / orig_height * orig_width)

    resized_img = cv2.resize(img_copy_CV, (resized_width, resized_height), interpolation=cv2.INTER_LINEAR)
    resized_img = resized_img.astype(int)

    mean = np.array([123.675, 116.28, 103.53])
    std = np.array([[58.395, 57.12, 57.375]])
    input_tensor = (resized_img - mean) / std

    input_tensor = input_tensor.transpose(2,0,1)[None,:,:,:].astype(np.float32)
    print(input_tensor[0][0][0])

    if resized_height < resized_width:
        input_tensor = np.pad(input_tensor,((0,0),(0,0),(0,1024-resized_height),(0,0)))
    else:
        input_tensor = np.pad(input_tensor,((0,0),(0,0),(0,0),(0,1024-resized_width)))
            
    start = time.perf_counter()
    outputs = encoder.run(None,{"images":input_tensor})
    embeddings = outputs[0]
    print(f"Encode time: {(time.perf_counter() - start)*1000:.2f} ms")

    # ENCODE PROMPT (single point)
    input_point = np.array([[321,230]])
    input_label = np.array([1])

    onnx_coord = np.concatenate([input_point, np.array([[0.0, 0.0]])], axis=0)[None, :, :]
    onnx_label = np.concatenate([input_label, np.array([-1])])[None, :].astype(np.float32)

    coords = deepcopy(onnx_coord).astype(float)
    coords[..., 0] = coords[..., 0] * (resized_width / orig_width)
    coords[..., 1] = coords[..., 1] * (resized_height / orig_height)

    onnx_coord = coords.astype("float32")

    #option 2 box:
    # input_box = np.array([0, 0, 300, 500]).reshape(2,2)
    # input_labels = np.array([2,3])

    # onnx_coord = input_box[None, :, :]
    # onnx_label = input_labels[None, :].astype(np.float32)

    # coords = deepcopy(onnx_coord).astype(float)
    # coords[..., 0] = coords[..., 0] * (resized_width / orig_width)
    # coords[..., 1] = coords[..., 1] * (resized_height / orig_height)

    # onnx_coord = coords.astype("float32")

    onnx_mask_input = np.zeros((1, 1, 256, 256), dtype=np.float32)
    onnx_has_mask_input = np.zeros(1, dtype=np.float32)


    masks,_,_ = decoder.run(None,{
        "image_embeddings": embeddings,
        "point_coords": onnx_coord,
        "point_labels": onnx_label,
        "mask_input": onnx_mask_input,
        "has_mask_input": onnx_has_mask_input,
        "orig_im_size": np.array([orig_height, orig_width], dtype=np.float32)
    })
    mask = masks[0][0]
    mask = (mask > 0).astype('uint8')*255
    print(mask.shape)

    opencv_image = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
    opencv_image = cv2.flip(opencv_image,0)

    scriptOp.copyNumpyArray(opencv_image)

    return

def onSetupParameters(scriptOp):
	"""Auto-generated by Component Editor"""
	# manual changes to anything other than parJSON will be	# destroyed by Comp Editor unless doc string above is	# changed

	TDJSON = op.TDModules.mod.TDJSON
	parJSON = """
	{
		"Fast Neural Style": {
			"Font": {
				"name": "Font",
				"label": "font",
				"page": "Fast Neural Style",
				"style": "File",
				"default": "",
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"help": ""
			},
			"Onnxmodel": {
				"name": "Onnxmodel",
				"label": "ONNX Model",
				"page": "Fast Neural Style",
				"style": "File",
				"default": "",
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"help": ""
			},
			"Conf": {
				"name": "Conf",
				"label": "Conf",
				"page": "Fast Neural Style",
				"style": "Float",
				"size": 1,
				"default": 0.0,
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"help": "",
				"min": 0.0,
				"max": 1.0,
				"normMin": 0.0,
				"normMax": 1.0,
				"clampMin": false,
				"clampMax": false
			}
		}
	}
	"""
	parData = TDJSON.textToJSON(parJSON)
	TDJSON.addParametersFromJSONOp(scriptOp, parData, destroyOthers=True)
