


Modelpath = str(op('script2').par.Onnxmodel)



def onCook(scriptOp):
    print("   ")
    print("   ")
    print(" start ")

    img = scriptOp.inputs[0].numpyArray()

    img_copy_CV = img[:, :, :3].copy()
    img_copy_CV = np.flip(img_copy_CV, axis=0)
    img_copy_CV = cv2.cvtColor(img_copy_CV, cv2.COLOR_BGR2RGB)


    img_copy_CV = cv2.resize(img_copy_CV, (640, 640))

    input = img_copy_CV.transpose(2, 0, 1).reshape(1, 3, 640, 640).astype("float32")
    conf = float(op('script2').par.Conf)
    yoloseg.conf_threshold = conf

    # Run YOLOv8 model
    start_time = time.time()

    boxes, scores, class_ids, masks = yoloseg.direct_call(input,img.shape)
    #combined_img = yoloseg.draw_detections(img_copy_CV, mask_alpha=0.1)
    
    img_copy_CV = img[:, :, :3].copy()
    #img_copy_CV = np.flip(img_copy_CV, axis=0)
    combined_img = yoloseg.draw_masks(img_copy_CV, mask_alpha=0.5)

    end_time = time.time()

    # Calculate and print execution time in milliseconds
    execution_time = (end_time - start_time) * 1000  # convert seconds to milliseconds
    fps = 1 / (execution_time/1000)
    #print(f"Execution time: {execution_time:.2f} ms (FPS): {fps:.2f}")

   

    scriptOp.copyNumpyArray(combined_img)

    return

def onSetupParameters(scriptOp):
	"""Auto-generated by Component Editor"""
	# manual changes to anything other than parJSON will be	# destroyed by Comp Editor unless doc string above is	# changed

	TDJSON = op.TDModules.mod.TDJSON
	parJSON = """
	{
		"Fast Neural Style": {
			"Onnxmodel": {
				"name": "Onnxmodel",
				"label": "ONNX Model",
				"page": "Fast Neural Style",
				"style": "File",
				"default": "",
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"help": ""
			},
			"Conf": {
				"name": "Conf",
				"label": "Conf",
				"page": "Fast Neural Style",
				"style": "Float",
				"size": 1,
				"default": 0.0,
				"enable": true,
				"startSection": false,
				"readOnly": false,
				"enableExpr": null,
				"help": "",
				"min": 0.0,
				"max": 1.0,
				"normMin": 0.0,
				"normMax": 1.0,
				"clampMin": false,
				"clampMax": false
			}
		}
	}
	"""
	parData = TDJSON.textToJSON(parJSON)
	TDJSON.addParametersFromJSONOp(scriptOp, parData, destroyOthers=True)


